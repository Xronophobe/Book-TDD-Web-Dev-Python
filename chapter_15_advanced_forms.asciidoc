[[chapter_15_advanced_forms]]
== More Advanced Forms

// TODO Harry write a paragraph about the server side validation


Now let's look at some more advanced forms usage.  We've helped our users
to avoid blank list items, so now let's help them avoid duplicate items.

This chapter goes into more intricate details of Django's form validation, and
you have my official permission to skip it if you already know all about
customising Django forms, or if you're reading this book for the TDD rather
than for the Django.

If you're still learning Django, there's good stuff in here.  If you
want to skip ahead, that's OK too. Make sure you take a quick look at the aside
on developer stupidity, and the recap on testing views at the end.


=== Another FT for Duplicate Items



((("form data validation", "for duplicate items", id="FDVduplicate15")))((("functional tests (FTs)", "for duplicate items", secondary-sortas="duplicate items", id="FTduplicate15")))((("duplicate items testing", "functional test for", id="DITfunctional15")))((("user interactions", "preventing duplicate items", id="UIduplicate15")))We
add a second test method to `ItemValidationTest`:

[role="sourcecode"]
.functional_tests/test_list_item_validation.py (ch13l001)
====
[source,python]
----
def test_cannot_add_duplicate_items(self):
    # Edith goes to the home page and starts a new list
    self.browser.get(self.live_server_url)
    self.get_item_input_box().send_keys('Buy wellies')
    self.get_item_input_box().send_keys(Keys.ENTER)
    self.wait_for_row_in_list_table('1: Buy wellies')

    # She accidentally tries to enter a duplicate item
    self.get_item_input_box().send_keys('Buy wellies')
    self.get_item_input_box().send_keys(Keys.ENTER)

    # She sees a helpful error message
    self.wait_for(lambda: self.assertEqual(
        self.browser.find_element(By.CSS_SELECTOR, '.invalid-feedback').text,
        "You've already got this in your list"
    ))
----
====

Why have two test methods rather than extending one, or having a new file
and class?  It's a judgement call.  These two feel closely related; they're
both about validation on the same input field, so it feels right to
keep them in the same file.  On the other hand, they're logically separate
enough that it's practical to keep them in different methods:


[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test functional_tests.test_list_item_validation*]
[...]
selenium.common.exceptions.NoSuchElementException: Message: Unable to locate
element: .invalid-feedback

Ran 2 tests in 9.613s
----

OK, so we know the first of the two tests passes now. Is there a way to run
just the failing one, I hear you ask?  Why, yes indeed:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test functional_tests.\
test_list_item_validation.ItemValidationTest.test_cannot_add_duplicate_items*]
[...]
selenium.common.exceptions.NoSuchElementException: Message: Unable to locate
element: .invalid-feedback
----


==== Preventing Duplicates at the Model Layer


((("model-layer validation", "preventing duplicate items")))Here's
what we really wanted to do.  It's a new test that checks that duplicate
items in the same list raise an error:

[role="sourcecode"]
.lists/tests/test_models.py (ch09l028)
====
[source,python]
----
def test_duplicate_items_are_invalid(self):
    list_ = List.objects.create()
    Item.objects.create(list=list_, text='bla')
    with self.assertRaises(ValidationError):
        item = Item(list=list_, text='bla')
        item.full_clean()
----
====

And, while it occurs to us, we add another test to make sure we don't
overdo it on our integrity constraints:


[role="sourcecode"]
.lists/tests/test_models.py (ch09l029)
====
[source,python]
----
def test_CAN_save_same_item_to_different_lists(self):
    list1 = List.objects.create()
    list2 = List.objects.create()
    Item.objects.create(list=list1, text='bla')
    item = Item(list=list2, text='bla')
    item.full_clean()  # should not raise
----
====

I always like to put a little comment for tests which are checking
that a particular use case should 'not' raise an error; otherwise,
it can be hard to see what's being tested:

----
AssertionError: ValidationError not raised
----

If we want to get it deliberately wrong, we can do this:


[role="sourcecode"]
.lists/models.py (ch09l030)
====
[source,python]
----
class Item(models.Model):
    text = models.TextField(default="", unique=True)
    list = models.ForeignKey(List, default=None, on_delete=models.CASCADE)
----
====

That lets us check that our second test really does pick up on this
problem:

----
Traceback (most recent call last):
  File "...goat-book/lists/tests/test_models.py", line 62, in
test_CAN_save_same_item_to_different_lists
    item.full_clean()  # should not raise
    [...]
django.core.exceptions.ValidationError: {'text': ['Item with this Text already
exists.']}
----

[role="less_space pagebreak-before"]
[[testing-for-stupidity]]
.An Aside on When to Test for Developer Stupidity
*******************************************************************************

One of the judgement calls in testing is when you should write tests that sound
like "check that we haven't done something stupid".  In general, you should be wary
of these.


In this case, we've written a test to check that you can't save duplicate items
to the same list.  Now, the simplest way to get that test to pass, the way in
which you'd write the fewest lines of code, would be to make it impossible to
save 'any' duplicate items.  That justifies writing another test, despite the
fact that it would be a "stupid" or "wrong" thing for us to code.

But you can't be writing tests for every possible way we could have coded
something wrong.  If you have a function that adds two numbers, you can write
a couple of tests:

[role="skipme"]
[source,python]
----
assert adder(1, 1) == 2
assert adder(2, 1) == 3
----

But you have the right to assume that the implementation isn't deliberately
screwy or perverse:

[role="skipme"]
[source,python]
----
def adder(a, b):
    # unlikely code!
    if a == 3:
        return 666
    else:
        return a + b
----

One way of putting it is that you should trust yourself not to do something
'deliberately' stupid, but not something 'accidentally' stupid.
*******************************************************************************

((("Meta attributes")))Just
like ++ModelForm++s, models have a `class Meta`, and that's where we can
implement a constraint which says that an item must be unique for a
particular list, or in other words, that `text` and `list` must be unique
together:

[role="sourcecode"]
.lists/models.py (ch09l031)
====
[source,python]
----
class Item(models.Model):
    text = models.TextField(default='')
    list = models.ForeignKey(List, default=None, on_delete=models.CASCADE)

    class Meta:
        unique_together = ('list', 'text')
----
====

You might want to take a quick peek at the
https://docs.djangoproject.com/en/4.2/ref/models/options/[Django docs on model
`Meta` attributes] at this point.


Great! Our unit tests are passing.
----
OK
----
// CSANAD: fully passing suite? I think just the unit tests
// TODO: in theory we should do a migration now.

[[rewrite-model-test]]
==== Rewriting the Old Model Test


That long-winded model test did serendipitously help us find unexpected
bugs, but now it's time to rewrite it. I wrote it in a very verbose style to
introduce the Django ORM, but in fact, we can get the same coverage from a
couple of much shorter tests.
Delete `test_saving_and_retrieving_items` and replace it with this:

[role="sourcecode"]
.lists/tests/test_models.py (ch13l010)
====
[source,python]
----
class ListAndItemModelsTest(TestCase):
    def test_default_text(self):
        item = Item()
        self.assertEqual(item.text, "")

    def test_item_is_related_to_list(self):
        mylist = List.objects.create()
        item = Item()
        item.list = mylist
        item.save()
        self.assertIn(item, mylist.item_set.all())


    [...]
----
====

That's more than enough really--a check of the default values of attributes
on a freshly initialized model object is enough to sanity-check that we've
probably set some fields up in 'models.py'.  The "item is related to list" test
is a real "belt and braces" test to make sure that our foreign key relationship
works.

While we're at it, we can split this file out into tests for `Item` and tests
for `List` (there's only one of the latter, `test_get_absolute_url`):

[role="sourcecode"]
.lists/tests/test_models.py (ch13l011)
====
[source,python]
----
class ItemModelTest(TestCase):
    def test_default_text(self):
        [...]


class ListModelTest(TestCase):
    def test_get_absolute_url(self):
        [...]
----
====

That's neater and tidier:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test lists*]
[...]
Ran 25 tests in 0.092s

OK
----


==== Some Integrity Errors Do Show Up on Save



((("data integrity errors")))A
final aside before we move on. Do you remember I mentioned in
<<chapter_13_database_layer_validation>> that some data integrity errors 'are' picked up
on save?  It all depends on whether the integrity constraint is actually being
enforced by the database.

Try running `makemigrations` and you'll see that Django wants to add the
`unique_together` constraint to the database itself, rather than just having
it as an application-layer constraint:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py makemigrations*]
Migrations for 'lists':
  src/lists/migrations/0005_alter_item_options_alter_item_unique_together.py
    - Alter unique_together for item (1 constraint(s))
----

Now let's run the migration:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py migrate*]
----

When you run the migration, you may encounter the following error:
[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py migrate*]
Operations to perform:
  Apply all migrations: auth, contenttypes, lists, sessions
Running migrations:
  Applying lists.0005_alter_item_unique_together...Traceback (most recent call last):
[...]
sqlite3.IntegrityError: UNIQUE constraint failed: lists_item.list_id, lists_item.text

[...]
django.db.utils.IntegrityError: UNIQUE constraint failed: lists_item.list_id, lists_item.text
----

The problem is that we have at least one database record which used to be valid
but after introducing our new constraint, the `unique_together`, it's no longer
compatible.

To fix this problem, we can just delete `src/db.sqlite3` and run the migration again.
We can do this because the database on our laptop is only used for dev, so the data in it is not important.

In <chapter_17_second_deploy>>, we'll deploy our new code to production,
and discuss what to do if we run into migrations and data integrity issues at that point.

Now if we change our duplicates test to do a `.save` instead of a
`.full_clean`...

[role="sourcecode"]
.lists/tests/test_models.py
====
[source,python]
----
    def test_duplicate_items_are_invalid(self):
        list_ = List.objects.create()
        Item.objects.create(list=list_, text='bla')
        with self.assertRaises(ValidationError):
            item = Item(list=list_, text='bla')
            # item.full_clean()
            item.save()
----
====

It gives:

----
ERROR: test_duplicate_items_are_invalid (lists.tests.test_models.ItemModelTest)
[...]
    return Database.Cursor.execute(self, query, params)
sqlite3.IntegrityError: UNIQUE constraint failed: lists_item.list_id,
lists_item.text
[...]
django.db.utils.IntegrityError: UNIQUE constraint failed: lists_item.list_id,
lists_item.text
----

You can see that the error bubbles up from SQLite, and it's a different
error from the one we want, an `IntegrityError` instead of a `ValidationError`.

Let's revert our changes to the test, and see them all passing again:

[role="dofirst-ch13l013"]
[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test lists*]
[...]
Ran 25 tests in 0.092s
OK
----

((("", startref="FTduplicate15")))((("", startref="DITfunctional15")))And
now it's time to commit our model-layer changes:

[role="small-code"]
[subs="specialcharacters,macros"]
----
$ pass:[<strong>git status</strong>] # should show changes to tests + models and new migration
$ pass:[<strong>git add src/lists</strong>]
$ pass:[<strong>git diff --staged</strong>]
$ pass:[<strong>git commit -m "Implement duplicate item validation at model layer"</strong>]
----
// CSANAD we manually added src/lists I'm guessing, not to commit the currently
// failing FT. Or, we could commit the FT too, but in that case adding src/lists
// is unnecessary because we would be doing `commit -a` anyway. I removed the
// comment to name the migration because it's descriptive enough now:
// 0005_alter_item_unique_together.


=== Experimenting with Duplicate Item Validation at the Views Layer


((("duplicate items testing", "at the views layer", secondary-sortas="views layer")))Let's
try running our FT, just to see where we are:

----
selenium.common.exceptions.NoSuchElementException: Message: Unable to locate
element: .invalid-feedback

----

In case you didn't see it as it flew past, the site is 500ing.footnote:[It's showing a server error, code 500.  Gotta get with the jargon!]
A quick unit test at the view level ought to clear this up:


[role="sourcecode"]
.lists/tests/test_views.py (ch13l014)
====
[source,python]
----
class ListViewTest(TestCase):
    [...]

    def test_for_invalid_input_shows_error_on_page(self):
        [...]


    def test_duplicate_item_validation_errors_end_up_on_lists_page(self):
        list1 = List.objects.create()
        item1 = Item.objects.create(list=list1, text='textey')
        response = self.client.post(
            f'/lists/{list1.id}/',
            data={'text': 'textey'}
        )

        expected_error = escape("You've already got this in your list")
        self.assertContains(response, expected_error)
        self.assertTemplateUsed(response, 'list.html')
        self.assertEqual(Item.objects.all().count(), 1)
----
====

Gives:

----
django.db.utils.IntegrityError: UNIQUE constraint failed: lists_item.list_id,
lists_item.text
----

We want to avoid integrity errors! Ideally, we want the call to `is_valid` to
somehow notice the duplication error before we even try to save, but to do
that, our form will need to know in advance what list it's being used for.

Let's put a skip on that test for now:

[role="sourcecode"]
.lists/tests/test_views.py (ch13l015)
====
[source,python]
----
from unittest import skip
[...]

    @skip
    def test_duplicate_item_validation_errors_end_up_on_lists_page(self):
----
====


=== A More Complex Form to Handle Uniqueness Validation

((("duplicate items testing", "complex form for")))((("uniqueness validation", seealso="duplicate items testing")))The
form to create a new list only needs to know one thing, the new item text.
A form which validates that list items are unique needs to know the list too.
Just as we overrode the save method on our `ItemForm`, this time we'll
override the constructor on our new form class so that it knows what list it
applies to.

We duplicate our tests for the previous form, tweaking them slightly:

[role="sourcecode"]
.lists/tests/test_forms.py (ch13l016)
====
[source,python]
----
from lists.forms import (
    DUPLICATE_ITEM_ERROR,
    EMPTY_ITEM_ERROR,
    ExistingListItemForm,
    ItemForm,
)
[...]

class ExistingListItemFormTest(TestCase):
    def test_form_renders_item_text_input(self):
        list_ = List.objects.create()
        form = ExistingListItemForm(for_list=list_)
        self.assertIn('placeholder="Enter a to-do item"', form.as_p())

    def test_form_validation_for_blank_items(self):
        list_ = List.objects.create()
        form = ExistingListItemForm(for_list=list_, data={"text": ""})
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors["text"], [EMPTY_ITEM_ERROR])

    def test_form_validation_for_duplicate_items(self):
        list_ = List.objects.create()
        Item.objects.create(list=list_, text="no twins!")
        form = ExistingListItemForm(for_list=list_, data={"text": "no twins!"})
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors["text"], [DUPLICATE_ITEM_ERROR])
----
====

Next we iterate through a few TDD cycles  until we get a form with a
custom constructor, which just ignores its `for_list` argument.
(I won't show them all, but I'm sure you'll do them, right? Remember, the Goat
sees all.)


[role="sourcecode"]
.lists/forms.py (ch09l071)
====
[source,python]
----
DUPLICATE_ITEM_ERROR = "You've already got this in your list"
[...]
class ExistingListItemForm(forms.models.ModelForm):
    def __init__(self, for_list, *args, **kwargs):
        super().__init__(*args, **kwargs)
----
====

At this point our error should be:

----
ValueError: ModelForm has no model class specified.
----

Then let's see if making it inherit from our existing form helps:

[role="sourcecode"]
.lists/forms.py (ch09l072)
====
[source,python]
----
class ExistingListItemForm(ItemForm):
    def __init__(self, for_list, *args, **kwargs):
        super().__init__(*args, **kwargs)
----
====

Yes, that takes us down to just one failure:

----
FAIL: test_form_validation_for_duplicate_items
(lists.tests.test_forms.ExistingListItemFormTest)
    self.assertFalse(form.is_valid())
AssertionError: True is not false
----

The next step requires a little knowledge of Django's internals, but you
can read up on it in the Django docs on
https://docs.djangoproject.com/en/4.2/ref/models/instances/#validating-objects[model
validation] and
https://docs.djangoproject.com/en/4.2/ref/forms/validation/[form validation].

Django uses a method called `validate_unique`, both on forms and models, and
we can use both, in conjunction with the `instance` attribute:

[role="sourcecode"]
.lists/forms.py
====
[source,python]
----
from django.core.exceptions import ValidationError
[...]

class ExistingListItemForm(ItemForm):

    def __init__(self, for_list, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.instance.list = for_list


    def validate_unique(self):
        try:
            self.instance.validate_unique()
        except ValidationError as e:
            e.error_dict = {'text': [DUPLICATE_ITEM_ERROR]}
            self._update_errors(e)
----
====
//ch10l018

That's a bit of Django voodoo right there, but we basically take the validation
error, adjust its error message, and then pass it back into the form.


And we're there!  A quick commit:

[subs="specialcharacters,quotes"]
----
$ *git diff*
$ *git add src/lists/forms.py src/lists/tests/test_forms.py*
$ *git commit -m "implement ExistingListItemForm, add DUPLICATE_ITEM_ERROR message"*
----
// CSANAD I think it's better to keep the commit neat.


=== Using the Existing List Item Form in the List View

((("duplicate items testing", "in the list view", secondary-sortas="list view", id="DITlist15")))Now
let's see if we can put this form to work in our view.

We remove the skip, and while we're at it, we can use our new constant. Tidy.

[role="sourcecode"]
.lists/tests/test_views.py (ch13l049)
====
[source,python]
----
from lists.forms import (
    DUPLICATE_ITEM_ERROR, EMPTY_ITEM_ERROR,
    ExistingListItemForm, ItemForm,
)
[...]

    def test_duplicate_item_validation_errors_end_up_on_lists_page(self):
        [...]
        expected_error = escape(DUPLICATE_ITEM_ERROR)
----
====

That brings back our integrity error:

----
django.db.utils.IntegrityError: UNIQUE constraint failed: lists_item.list_id,
lists_item.text
----

Our fix for this is to switch to using the new form class.  Before we implement
it, let's find the tests where we check the form class, and adjust them:

[role="sourcecode"]
.lists/tests/test_views.py (ch13l050)
====
[source,python]
----
class ListViewTest(TestCase):
[...]

    def test_displays_item_form(self):
        mylist = List.objects.create()
        response = self.client.get(f"/lists/{mylist.id}/")
        self.assertIsInstance(response.context["form"], ExistingListItemForm)
        self.assertContains(response, 'name="text"')

    [...]

    def test_for_invalid_input_passes_form_to_template(self):
        response = self.post_invalid_input()
        self.assertIsInstance(response.context["form"], ExistingListItemForm)
----
====

That gives us:

----
AssertionError: <ItemForm bound=False, valid=False, fields=(text)> is not an
instance of <class 'lists.forms.ExistingListItemForm'>
----

So we can adjust the view:

[role="sourcecode"]
.lists/views.py (ch13l051)
====
[source,python]
----
from lists.forms import ExistingListItemForm, ItemForm
[...]
def view_list(request, list_id):
    our_list = List.objects.get(id=list_id)
    form = ExistingListItemForm(for_list=our_list)
    if request.method == "POST":
        form = ExistingListItemForm(for_list=our_list, data=request.POST)
        if form.is_valid():
            form.save()
            [...]
    else:
        form = ExistingListItemForm(for_list=our_list)
    [...]
----
====


And that 'almost' fixes everything, except for an unexpected fail:

----
TypeError: save() missing 1 required positional argument: 'for_list'
----

Our custom save method from the parent `ItemForm` is no longer needed.
Let's make a quick unit test for that:

//IDEA: add the form class names here so ppl know which test_form_save and save()

[role="sourcecode"]
.lists/tests/test_forms.py (ch13l053)
====
[source,python]
----
def test_form_save(self):
    list_ = List.objects.create()
    form = ExistingListItemForm(for_list=list_, data={'text': 'hi'})
    new_item = form.save()
    self.assertEqual(new_item, Item.objects.all()[0])
----
====

We can make our form call the grandparent save method:

[role="sourcecode"]
.lists/forms.py (ch13l054)
====
[source,python]
----
class ExistingListItemForm(ItemForm):
    [...]
    def save(self):
        return forms.models.ModelForm.save(self)
----
====

NOTE: Personal opinion here: I could have used `super`, but I prefer not to use
    `super` when it requires arguments, say, to get a grandparent method. I find
    Python 3's `super()` with no args awesome to get the immediate parent.
    Anything else is too error-prone, and I find it ugly besides. YMMV.


Let's run the tests!  All the unit tests pass:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test lists*]
[...]
Ran 30 tests in 0.082s

OK
----

But we still have something to do about our FTs:
[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test functional_tests.test_list_item_validation*]
[...]
FAIL: test_cannot_add_duplicate_items (functional_tests.test_list_item_validation.ItemValidationTest.test_cannot_add_duplicate_items)
----------------------------------------------------------------------
[...]
AssertionError: '' != "You've already got this in your list"
+ You've already got this in your list
----

The error message isn't being displayed because we are not using the Bootstrap
classes. Although it would have been nice to minimise hand-written html and
use Django instead, it seems like we need to bring back our custom
`<input>` and add a few attributes manually:

[role="sourcecode"]
.src/lists/templates/base.html
====
[source,diff]
----
@@ -13,13 -14,26 +14,26 @@@
  <div class="col-lg-6 text-center">
      <h1 class="display-1 mb-4">{% block header_text %}{% endblock %}</h1>
-     <form method="POST" action="{% block form_action %}{% endblock %}">
-         {{ form.text }}
+     <form
+         class="was-validated"  <1>
+         method="POST"
+         action="{% block form_action %}{% endblock %}"
+     >
          {% csrf_token %}
+         <input
+             id="id_text"
+             name="text"
+             class="form-control form-control-lg {% if form.errors %}is-invalid{% endif %}"  <2>
+             placeholder="Enter a to-do item"
+             value="{{ form.text.value }}"
+             aria-describedby="id_text_feedback"
+             required
+         />
          {% if form.errors %}
-             <div class="invalid-feedback">{{ form.errors.text }}</div>
+             <div class="invalid-feedback">{{ form.errors.text.0 }}</div>  <3>
          {% endif %}
      </form>
  </div>
----
====

<1> We give `.was-validated` to the `<form>`
<2> We provide an `<input>` and the most important custom setting will be its
    `class`. As you can see, we can use conditionals even for providing
    additional `class` -es.
<3> If you try to just simply display `form.errors.text` you'll see it ends up
    as a list item in an unordered list. To avoid that, let's just
    select `form.errors.text.0`.

NOTE:  Another fliip-flop! We spent most of the last chapter switching from handcrafted html
  to having our form autogenerated by django, and now we're switching back.
  It's a little frustrating, and I could have gone back and changed the book's text to avoid the back+forth,
  but I prefer to show software development as it really is.
  We often try things out and end up changing our minds.
  Particularly with frameworks like Django,
  you can find yourself taking advantage of auto-generated shortcuts for as long as they work,
  but at some points you meet the limits of what the framework designers have anticipated,
  and it's time to go back to doing the work yourself.
  It doesn't mean you should always reinvent the wheel!

Now when we run the FT for validation again:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test functional_tests.test_list_item_validation*]
[...]
..
 ---------------------------------------------------------------------
Ran 2 tests in 12.048s

OK
----

As a final check, we rerun 'all' the FTs:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test functional_tests*]
[...]
.....
 ---------------------------------------------------------------------
Ran 5 tests in 19.048s

OK
----

Hooray! Time for a final commit, and a wrap-up of what we've learned about
testing views over the last few chapters.((("", startref="DITlist15")))


=== Wrapping Up: What We've Learned About Testing Django

((("class-based generic views (CBGVs)", "key tests and assertions")))((("Django framework", "class-based generic views")))We're
now at a point where our app looks a lot more like a "standard"
Django app, and it implements the three common Django layers: models,
forms, and views.  We no longer have any "training wheels&#x201d;-style tests,
and our code looks pretty much like code we'd be happy to see in a
real app.

We have one unit test file for each of our key source code files.  Here's
a recap of the biggest (and highest-level) one, 'test_views' (the listing
shows just the key tests and assertions, and your order may vary):
// CSANAD: Why are we only showing ListViewTest? HomePageTest, NewListTest

.What to Test in Views
******************************************************************************

[role="sourcecode skipme small-code"]
.lists/tests/test_views.py
====
[source,python]
----
class ListViewTest(TestCase):
  def test_uses_list_template(self):
      response = self.client.get(f'/lists/{mylist.id}/') #<1>
      self.assertTemplateUsed(response, 'list.html') #<2>
  def test_passes_correct_list_to_template(self):
      self.assertEqual(response.context['list'], correct_list) #<3>
  def test_displays_item_form(self):
      self.assertIsInstance(response.context['form'], ExistingListItemForm) #<4>
      self.assertContains(response, 'name="text"')
  def test_displays_only_items_for_that_list(self):
      self.assertContains(response, 'itemey 1') #<5>
      self.assertContains(response, 'itemey 2') #<5>
      self.assertNotContains(response, 'other list item 1') #<5>
  def test_can_save_a_POST_request_to_an_existing_list(self):
      self.assertEqual(Item.objects.count(), 1) #<6>
      self.assertEqual(new_item.text, 'A new item for an existing list') #<6>
  def test_POST_redirects_to_list_view(self):
      self.assertRedirects(response, f'/lists/{correct_list.id}/') #<6>
  def test_for_invalid_input_nothing_saved_to_db(self):
      self.assertEqual(Item.objects.count(), 0) #<6>
  def test_for_invalid_input_renders_list_template(self):
      self.assertEqual(response.status_code, 200)
      self.assertTemplateUsed(response, 'list.html') #<6>
  def test_for_invalid_input_passes_form_to_template(self):
      self.assertIsInstance(response.context['form'], ExistingListItemForm) #<7>
  def test_for_invalid_input_shows_error_on_page(self):
      self.assertContains(response, escape(EMPTY_ITEM_ERROR)) #<7>
  def test_duplicate_item_validation_errors_end_up_on_lists_page(self):
      self.assertContains(response, expected_error) #<7>
      self.assertTemplateUsed(response, 'list.html')
      self.assertEqual(Item.objects.all().count(), 1)
----
====


<1> Use the Django Test Client.

<2> Check the template used.
// CSANAD: we aren't asserting anything else in this test

<3> Check that received objects are the right ones.

<4> Check that any forms are of the correct class.

<5> Think about testing template logic:  any `for` or `if` might deserve a
    minimal test.

<6> For POST requests, make sure you test both the valid case and the invalid
    case.

<7> Optionally, sanity-check that your form is rendered, and its errors are
    displayed.
******************************************************************************

Why these points?  Skip ahead to <<appendix_Django_Class-Based_Views>>, and I'll show how
they are sufficient to ensure that our views are still correct if we refactor
them to start using class-based views.((("", startref="FDVduplicate15")))((("", startref="UIduplicate15")))
// CSANAD: We might want to revisit these again after updating/reviewing the
// Django Class Based Views.


Next we'll try to make our data validation more friendly by using a bit
of client-side code.  Uh-oh, you know what that means...

