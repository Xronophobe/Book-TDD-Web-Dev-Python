[[chapter_17_second_deploy]]
Deploying Our New Code
----------------------

((("deployment", "procedure for", id="Dpro17")))It's
time to deploy our brilliant new validation code to our live servers.
This will be a chance to see our automated deploy scripts in action for the
second time.


NOTE: At this point I want to say a huge thanks to Andrew Godwin and the whole
    Django team.  Up until Django 1.7, I used to have a whole long section,
    entirely devoted to migrations.  Migrations now "just work", so I was able to
    drop it altogether.  Thanks for all the great work, gang!



Staging Deploy
~~~~~~~~~~~~~~


We start with the staging server:

[role="against-server"]
[subs="specialcharacters,macros"]
----
$ pass:quotes[*git push*]
$ pass:quotes[*cd deploy_tools*]
$ pass:quotes[*fab deploy:host=elspeth@staging.ottg.co.uk*]
[...]
Disconnecting from staging.ottg.co.uk... done.
----

Restart Gunicorn:

[role="server-commands skipme"]
[subs="specialcharacters,quotes"]
----
elspeth@server:$ *sudo systemctl restart gunicorn-staging.ottg.co.uk*
----

And run the tests against staging:

[role="small-code"]
[subs="specialcharacters,macros"]
----
$ pass:quotes[*STAGING_SERVER=staging.ottg.co.uk python manage.py test functional_tests*]
OK
----



[role="pagebreak-before less_space"]
Live Deploy
~~~~~~~~~~~


Assuming all is well, we then run our deploy against live:


[role="against-server"]
[subs="specialcharacters,macros"]
----
$ pass:quotes[*fab deploy:host=elspeth@superlists.ottg.co.uk*]
----

[role="server-commands"]
[subs="specialcharacters,quotes"]
----
elspeth@server:$ *sudo service gunicorn-superlists.ottg.co.uk restart*
----


What to Do If You See a Database Error
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Because our migrations introduce a new integrity constraint, you may find
that it fails to apply because some existing data violates that constraint.

At this point you have two choices:

* Delete the database on the server and try again.  After all, it's only a 
  toy project!

* Learn about data migrations.  See <<data-migrations-appendix>>.


Wrap-Up: git tag the New Release
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


The last thing to do is to tag the release in our VCS--it's important that
we're always able to keep track of what's live:

[subs="specialcharacters,quotes"]
----
$ *git tag -f LIVE*  # needs the -f because we are replacing the old tag
$ *export TAG=`date +DEPLOYED-%F/%H%M`*
$ *git tag $TAG*
$ *git push -f origin LIVE $TAG*
----

NOTE: Some people don't like to use `push -f` and update an existing tag, and
    will instead use some kind of version number to tag their releases.  Use
    whatever works for you.

And on that note, we can wrap up <<part2>>, and move on to the more exciting
topics that comprise <<part3>>.  Can't wait!

[role="pagebreak-before less_space"]
.Deployment Procedure Review
*******************************************************************************

We've done a couple of deploys now, so this is a good time for a little recap:

* `git push` latest code
* Deploy to staging and run functional tests against staging
* Deploy to live
* Tag the release 

Deployment procedures evolve and get more complex as projects grow,
and it's an area that can grow hard to maintain,
full of manual checks and procedures,
if you're not careful to keep things automated.
There's lots more to learn about this, but it's out of scope for this book.
Look up "continuous delivery" for some background reading.
((("", startref="Dpro17")))

*******************************************************************************

